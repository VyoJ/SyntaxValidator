Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> switch
Rule 1     switch -> ID LARROW SWITCH LPAREN expr COMMA cases RPAREN
Rule 2     switch -> ID EQUAL SWITCH LPAREN expr COMMA cases RPAREN
Rule 3     switch -> SWITCH LPAREN expr COMMA cases RPAREN
Rule 4     cases -> STRING COMMA cases
Rule 5     cases -> casevalue EQUAL STRING COMMA cases
Rule 6     cases -> casevalue EQUAL STRING
Rule 7     cases -> STRING
Rule 8     casevalue -> STRING
Rule 9     casevalue -> ID
Rule 10    expr -> NUM
Rule 11    expr -> ID

Terminals, with rules where they appear

COMMA                : 1 2 3 4 5
EQUAL                : 2 5 6
ID                   : 1 2 9 11
LARROW               : 1
LPAREN               : 1 2 3
NUM                  : 10
RPAREN               : 1 2 3
STRING               : 4 5 6 7 8
SWITCH               : 1 2 3
error                : 

Nonterminals, with rules where they appear

cases                : 1 2 3 4 5
casevalue            : 5 6
expr                 : 1 2 3
switch               : 0

Parsing method: LALR

state 0

    (0) S' -> . switch
    (1) switch -> . ID LARROW SWITCH LPAREN expr COMMA cases RPAREN
    (2) switch -> . ID EQUAL SWITCH LPAREN expr COMMA cases RPAREN
    (3) switch -> . SWITCH LPAREN expr COMMA cases RPAREN

    ID              shift and go to state 2
    SWITCH          shift and go to state 3

    switch                         shift and go to state 1

state 1

    (0) S' -> switch .



state 2

    (1) switch -> ID . LARROW SWITCH LPAREN expr COMMA cases RPAREN
    (2) switch -> ID . EQUAL SWITCH LPAREN expr COMMA cases RPAREN

    LARROW          shift and go to state 4
    EQUAL           shift and go to state 5


state 3

    (3) switch -> SWITCH . LPAREN expr COMMA cases RPAREN

    LPAREN          shift and go to state 6


state 4

    (1) switch -> ID LARROW . SWITCH LPAREN expr COMMA cases RPAREN

    SWITCH          shift and go to state 7


state 5

    (2) switch -> ID EQUAL . SWITCH LPAREN expr COMMA cases RPAREN

    SWITCH          shift and go to state 8


state 6

    (3) switch -> SWITCH LPAREN . expr COMMA cases RPAREN
    (10) expr -> . NUM
    (11) expr -> . ID

    NUM             shift and go to state 10
    ID              shift and go to state 11

    expr                           shift and go to state 9

state 7

    (1) switch -> ID LARROW SWITCH . LPAREN expr COMMA cases RPAREN

    LPAREN          shift and go to state 12


state 8

    (2) switch -> ID EQUAL SWITCH . LPAREN expr COMMA cases RPAREN

    LPAREN          shift and go to state 13


state 9

    (3) switch -> SWITCH LPAREN expr . COMMA cases RPAREN

    COMMA           shift and go to state 14


state 10

    (10) expr -> NUM .

    COMMA           reduce using rule 10 (expr -> NUM .)


state 11

    (11) expr -> ID .

    COMMA           reduce using rule 11 (expr -> ID .)


state 12

    (1) switch -> ID LARROW SWITCH LPAREN . expr COMMA cases RPAREN
    (10) expr -> . NUM
    (11) expr -> . ID

    NUM             shift and go to state 10
    ID              shift and go to state 11

    expr                           shift and go to state 15

state 13

    (2) switch -> ID EQUAL SWITCH LPAREN . expr COMMA cases RPAREN
    (10) expr -> . NUM
    (11) expr -> . ID

    NUM             shift and go to state 10
    ID              shift and go to state 11

    expr                           shift and go to state 16

state 14

    (3) switch -> SWITCH LPAREN expr COMMA . cases RPAREN
    (4) cases -> . STRING COMMA cases
    (5) cases -> . casevalue EQUAL STRING COMMA cases
    (6) cases -> . casevalue EQUAL STRING
    (7) cases -> . STRING
    (8) casevalue -> . STRING
    (9) casevalue -> . ID

    STRING          shift and go to state 18
    ID              shift and go to state 20

    cases                          shift and go to state 17
    casevalue                      shift and go to state 19

state 15

    (1) switch -> ID LARROW SWITCH LPAREN expr . COMMA cases RPAREN

    COMMA           shift and go to state 21


state 16

    (2) switch -> ID EQUAL SWITCH LPAREN expr . COMMA cases RPAREN

    COMMA           shift and go to state 22


state 17

    (3) switch -> SWITCH LPAREN expr COMMA cases . RPAREN

    RPAREN          shift and go to state 23


state 18

    (4) cases -> STRING . COMMA cases
    (7) cases -> STRING .
    (8) casevalue -> STRING .

    COMMA           shift and go to state 24
    RPAREN          reduce using rule 7 (cases -> STRING .)
    EQUAL           reduce using rule 8 (casevalue -> STRING .)


state 19

    (5) cases -> casevalue . EQUAL STRING COMMA cases
    (6) cases -> casevalue . EQUAL STRING

    EQUAL           shift and go to state 25


state 20

    (9) casevalue -> ID .

    EQUAL           reduce using rule 9 (casevalue -> ID .)


state 21

    (1) switch -> ID LARROW SWITCH LPAREN expr COMMA . cases RPAREN
    (4) cases -> . STRING COMMA cases
    (5) cases -> . casevalue EQUAL STRING COMMA cases
    (6) cases -> . casevalue EQUAL STRING
    (7) cases -> . STRING
    (8) casevalue -> . STRING
    (9) casevalue -> . ID

    STRING          shift and go to state 18
    ID              shift and go to state 20

    cases                          shift and go to state 26
    casevalue                      shift and go to state 19

state 22

    (2) switch -> ID EQUAL SWITCH LPAREN expr COMMA . cases RPAREN
    (4) cases -> . STRING COMMA cases
    (5) cases -> . casevalue EQUAL STRING COMMA cases
    (6) cases -> . casevalue EQUAL STRING
    (7) cases -> . STRING
    (8) casevalue -> . STRING
    (9) casevalue -> . ID

    STRING          shift and go to state 18
    ID              shift and go to state 20

    cases                          shift and go to state 27
    casevalue                      shift and go to state 19

state 23

    (3) switch -> SWITCH LPAREN expr COMMA cases RPAREN .

    $end            reduce using rule 3 (switch -> SWITCH LPAREN expr COMMA cases RPAREN .)


state 24

    (4) cases -> STRING COMMA . cases
    (4) cases -> . STRING COMMA cases
    (5) cases -> . casevalue EQUAL STRING COMMA cases
    (6) cases -> . casevalue EQUAL STRING
    (7) cases -> . STRING
    (8) casevalue -> . STRING
    (9) casevalue -> . ID

    STRING          shift and go to state 18
    ID              shift and go to state 20

    cases                          shift and go to state 28
    casevalue                      shift and go to state 19

state 25

    (5) cases -> casevalue EQUAL . STRING COMMA cases
    (6) cases -> casevalue EQUAL . STRING

    STRING          shift and go to state 29


state 26

    (1) switch -> ID LARROW SWITCH LPAREN expr COMMA cases . RPAREN

    RPAREN          shift and go to state 30


state 27

    (2) switch -> ID EQUAL SWITCH LPAREN expr COMMA cases . RPAREN

    RPAREN          shift and go to state 31


state 28

    (4) cases -> STRING COMMA cases .

    RPAREN          reduce using rule 4 (cases -> STRING COMMA cases .)


state 29

    (5) cases -> casevalue EQUAL STRING . COMMA cases
    (6) cases -> casevalue EQUAL STRING .

    COMMA           shift and go to state 32
    RPAREN          reduce using rule 6 (cases -> casevalue EQUAL STRING .)


state 30

    (1) switch -> ID LARROW SWITCH LPAREN expr COMMA cases RPAREN .

    $end            reduce using rule 1 (switch -> ID LARROW SWITCH LPAREN expr COMMA cases RPAREN .)


state 31

    (2) switch -> ID EQUAL SWITCH LPAREN expr COMMA cases RPAREN .

    $end            reduce using rule 2 (switch -> ID EQUAL SWITCH LPAREN expr COMMA cases RPAREN .)


state 32

    (5) cases -> casevalue EQUAL STRING COMMA . cases
    (4) cases -> . STRING COMMA cases
    (5) cases -> . casevalue EQUAL STRING COMMA cases
    (6) cases -> . casevalue EQUAL STRING
    (7) cases -> . STRING
    (8) casevalue -> . STRING
    (9) casevalue -> . ID

    STRING          shift and go to state 18
    ID              shift and go to state 20

    casevalue                      shift and go to state 19
    cases                          shift and go to state 33

state 33

    (5) cases -> casevalue EQUAL STRING COMMA cases .

    RPAREN          reduce using rule 5 (cases -> casevalue EQUAL STRING COMMA cases .)

