Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> switch
Rule 1     switch -> ID LARROW SWITCH LPAREN expr COMMA cases RPAREN
Rule 2     switch -> ID EQUAL SWITCH LPAREN expr COMMA cases RPAREN
Rule 3     cases -> STRING COMMA cases
Rule 4     cases -> STRING EQUAL STRING COMMA cases
Rule 5     cases -> STRING EQUAL STRING
Rule 6     cases -> STRING
Rule 7     expr -> NUM
Rule 8     expr -> ID

Terminals, with rules where they appear

COMMA                : 1 2 3 4
EQUAL                : 2 4 5
ID                   : 1 2 8
LARROW               : 1
LPAREN               : 1 2
NUM                  : 7
RPAREN               : 1 2
STRING               : 3 4 4 5 5 6
SWITCH               : 1 2
error                : 

Nonterminals, with rules where they appear

cases                : 1 2 3 4
expr                 : 1 2
switch               : 0

Parsing method: LALR

state 0

    (0) S' -> . switch
    (1) switch -> . ID LARROW SWITCH LPAREN expr COMMA cases RPAREN
    (2) switch -> . ID EQUAL SWITCH LPAREN expr COMMA cases RPAREN

    ID              shift and go to state 2

    switch                         shift and go to state 1

state 1

    (0) S' -> switch .



state 2

    (1) switch -> ID . LARROW SWITCH LPAREN expr COMMA cases RPAREN
    (2) switch -> ID . EQUAL SWITCH LPAREN expr COMMA cases RPAREN

    LARROW          shift and go to state 3
    EQUAL           shift and go to state 4


state 3

    (1) switch -> ID LARROW . SWITCH LPAREN expr COMMA cases RPAREN

    SWITCH          shift and go to state 5


state 4

    (2) switch -> ID EQUAL . SWITCH LPAREN expr COMMA cases RPAREN

    SWITCH          shift and go to state 6


state 5

    (1) switch -> ID LARROW SWITCH . LPAREN expr COMMA cases RPAREN

    LPAREN          shift and go to state 7


state 6

    (2) switch -> ID EQUAL SWITCH . LPAREN expr COMMA cases RPAREN

    LPAREN          shift and go to state 8


state 7

    (1) switch -> ID LARROW SWITCH LPAREN . expr COMMA cases RPAREN
    (7) expr -> . NUM
    (8) expr -> . ID

    NUM             shift and go to state 11
    ID              shift and go to state 9

    expr                           shift and go to state 10

state 8

    (2) switch -> ID EQUAL SWITCH LPAREN . expr COMMA cases RPAREN
    (7) expr -> . NUM
    (8) expr -> . ID

    NUM             shift and go to state 11
    ID              shift and go to state 9

    expr                           shift and go to state 12

state 9

    (8) expr -> ID .

    COMMA           reduce using rule 8 (expr -> ID .)


state 10

    (1) switch -> ID LARROW SWITCH LPAREN expr . COMMA cases RPAREN

    COMMA           shift and go to state 13


state 11

    (7) expr -> NUM .

    COMMA           reduce using rule 7 (expr -> NUM .)


state 12

    (2) switch -> ID EQUAL SWITCH LPAREN expr . COMMA cases RPAREN

    COMMA           shift and go to state 14


state 13

    (1) switch -> ID LARROW SWITCH LPAREN expr COMMA . cases RPAREN
    (3) cases -> . STRING COMMA cases
    (4) cases -> . STRING EQUAL STRING COMMA cases
    (5) cases -> . STRING EQUAL STRING
    (6) cases -> . STRING

    STRING          shift and go to state 16

    cases                          shift and go to state 15

state 14

    (2) switch -> ID EQUAL SWITCH LPAREN expr COMMA . cases RPAREN
    (3) cases -> . STRING COMMA cases
    (4) cases -> . STRING EQUAL STRING COMMA cases
    (5) cases -> . STRING EQUAL STRING
    (6) cases -> . STRING

    STRING          shift and go to state 16

    cases                          shift and go to state 17

state 15

    (1) switch -> ID LARROW SWITCH LPAREN expr COMMA cases . RPAREN

    RPAREN          shift and go to state 18


state 16

    (3) cases -> STRING . COMMA cases
    (4) cases -> STRING . EQUAL STRING COMMA cases
    (5) cases -> STRING . EQUAL STRING
    (6) cases -> STRING .

    COMMA           shift and go to state 19
    EQUAL           shift and go to state 20
    RPAREN          reduce using rule 6 (cases -> STRING .)


state 17

    (2) switch -> ID EQUAL SWITCH LPAREN expr COMMA cases . RPAREN

    RPAREN          shift and go to state 21


state 18

    (1) switch -> ID LARROW SWITCH LPAREN expr COMMA cases RPAREN .

    $end            reduce using rule 1 (switch -> ID LARROW SWITCH LPAREN expr COMMA cases RPAREN .)


state 19

    (3) cases -> STRING COMMA . cases
    (3) cases -> . STRING COMMA cases
    (4) cases -> . STRING EQUAL STRING COMMA cases
    (5) cases -> . STRING EQUAL STRING
    (6) cases -> . STRING

    STRING          shift and go to state 16

    cases                          shift and go to state 22

state 20

    (4) cases -> STRING EQUAL . STRING COMMA cases
    (5) cases -> STRING EQUAL . STRING

    STRING          shift and go to state 23


state 21

    (2) switch -> ID EQUAL SWITCH LPAREN expr COMMA cases RPAREN .

    $end            reduce using rule 2 (switch -> ID EQUAL SWITCH LPAREN expr COMMA cases RPAREN .)


state 22

    (3) cases -> STRING COMMA cases .

    RPAREN          reduce using rule 3 (cases -> STRING COMMA cases .)


state 23

    (4) cases -> STRING EQUAL STRING . COMMA cases
    (5) cases -> STRING EQUAL STRING .

    COMMA           shift and go to state 24
    RPAREN          reduce using rule 5 (cases -> STRING EQUAL STRING .)


state 24

    (4) cases -> STRING EQUAL STRING COMMA . cases
    (3) cases -> . STRING COMMA cases
    (4) cases -> . STRING EQUAL STRING COMMA cases
    (5) cases -> . STRING EQUAL STRING
    (6) cases -> . STRING

    STRING          shift and go to state 16

    cases                          shift and go to state 25

state 25

    (4) cases -> STRING EQUAL STRING COMMA cases .

    RPAREN          reduce using rule 4 (cases -> STRING EQUAL STRING COMMA cases .)

