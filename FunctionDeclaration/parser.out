Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> declaration
Rule 1     declaration -> ID LARROW FUNC LPAREN args RPAREN LBRACE statement RBRACE
Rule 2     args -> empty
Rule 3     args -> ID
Rule 4     args -> ID COMMA args
Rule 5     statement -> ID statement
Rule 6     statement -> ID
Rule 7     empty -> <empty>

Terminals, with rules where they appear

COMMA                : 4
FUNC                 : 1
ID                   : 1 3 4 5 6
LARROW               : 1
LBRACE               : 1
LPAREN               : 1
RBRACE               : 1
RPAREN               : 1
error                : 

Nonterminals, with rules where they appear

args                 : 1 4
declaration          : 0
empty                : 2
statement            : 1 5

Parsing method: LALR

state 0

    (0) S' -> . declaration
    (1) declaration -> . ID LARROW FUNC LPAREN args RPAREN LBRACE statement RBRACE

    ID              shift and go to state 2

    declaration                    shift and go to state 1

state 1

    (0) S' -> declaration .



state 2

    (1) declaration -> ID . LARROW FUNC LPAREN args RPAREN LBRACE statement RBRACE

    LARROW          shift and go to state 3


state 3

    (1) declaration -> ID LARROW . FUNC LPAREN args RPAREN LBRACE statement RBRACE

    FUNC            shift and go to state 4


state 4

    (1) declaration -> ID LARROW FUNC . LPAREN args RPAREN LBRACE statement RBRACE

    LPAREN          shift and go to state 5


state 5

    (1) declaration -> ID LARROW FUNC LPAREN . args RPAREN LBRACE statement RBRACE
    (2) args -> . empty
    (3) args -> . ID
    (4) args -> . ID COMMA args
    (7) empty -> .

    ID              shift and go to state 6
    RPAREN          reduce using rule 7 (empty -> .)

    args                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (3) args -> ID .
    (4) args -> ID . COMMA args

    RPAREN          reduce using rule 3 (args -> ID .)
    COMMA           shift and go to state 9


state 7

    (1) declaration -> ID LARROW FUNC LPAREN args . RPAREN LBRACE statement RBRACE

    RPAREN          shift and go to state 10


state 8

    (2) args -> empty .

    RPAREN          reduce using rule 2 (args -> empty .)


state 9

    (4) args -> ID COMMA . args
    (2) args -> . empty
    (3) args -> . ID
    (4) args -> . ID COMMA args
    (7) empty -> .

    ID              shift and go to state 6
    RPAREN          reduce using rule 7 (empty -> .)

    args                           shift and go to state 11
    empty                          shift and go to state 8

state 10

    (1) declaration -> ID LARROW FUNC LPAREN args RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 12


state 11

    (4) args -> ID COMMA args .

    RPAREN          reduce using rule 4 (args -> ID COMMA args .)


state 12

    (1) declaration -> ID LARROW FUNC LPAREN args RPAREN LBRACE . statement RBRACE
    (5) statement -> . ID statement
    (6) statement -> . ID

    ID              shift and go to state 13

    statement                      shift and go to state 14

state 13

    (5) statement -> ID . statement
    (6) statement -> ID .
    (5) statement -> . ID statement
    (6) statement -> . ID

    RBRACE          reduce using rule 6 (statement -> ID .)
    ID              shift and go to state 13

    statement                      shift and go to state 15

state 14

    (1) declaration -> ID LARROW FUNC LPAREN args RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 16


state 15

    (5) statement -> ID statement .

    RBRACE          reduce using rule 5 (statement -> ID statement .)


state 16

    (1) declaration -> ID LARROW FUNC LPAREN args RPAREN LBRACE statement RBRACE .

    $end            reduce using rule 1 (declaration -> ID LARROW FUNC LPAREN args RPAREN LBRACE statement RBRACE .)

